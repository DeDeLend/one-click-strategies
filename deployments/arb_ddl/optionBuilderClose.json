{
  "address": "0xe5EaFFd06db43E73C5D3a7608F6901680BDB93a2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lyra_eth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lyra_btc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operationalTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lyra_ethErc721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lyra_btcErc721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hegicErc721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ClosePositionByHegic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strikeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILyra.OptionType",
          "name": "optionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "setCollateralTo",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTotalCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTotalCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "ClosePositionByLyra",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buildID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productType",
          "type": "uint256"
        }
      ],
      "name": "CreateBuild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BaseOptionBuilder.ProtocolType[]",
          "name": "protocolsArrays",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "parametersArray",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "productType",
          "type": "uint256"
        }
      ],
      "name": "consolidationOfTransactions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromHegic",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionID",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "name": "decodeFromLyra",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strikeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iterations",
              "type": "uint256"
            },
            {
              "internalType": "enum ILyra.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setCollateralTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            }
          ],
          "internalType": "struct ILyra.TradeInputParameters",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionID",
          "type": "uint256"
        }
      ],
      "name": "encodeFromHegic",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "strikeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iterations",
              "type": "uint256"
            },
            {
              "internalType": "enum ILyra.OptionType",
              "name": "optionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setCollateralTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalCost",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            }
          ],
          "internalType": "struct ILyra.TradeInputParameters",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "encodeFromLyra",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "paramData",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hegicErc721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lyra_btc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lyra_btcErc721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lyra_eth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lyra_ethErc721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextBuildID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationalTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x26830dedfb14939c9330f1e4d2e62aac16d49a5b73e2edf2912b7754692fef71",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0xe5EaFFd06db43E73C5D3a7608F6901680BDB93a2",
    "transactionIndex": 3,
    "gasUsed": "13228280",
    "logsBloom": "0x
    "blockHash": "0xf182e567198463a662fe54475c1d1a1aab503890f6f9ef95fef75a58e51fa4d4",
    "transactionHash": "0x26830dedfb14939c9330f1e4d2e62aac16d49a5b73e2edf2912b7754692fef71",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 99355654,
        "transactionHash": "0x26830dedfb14939c9330f1e4d2e62aac16d49a5b73e2edf2912b7754692fef71",
        "address": "0xe5EaFFd06db43E73C5D3a7608F6901680BDB93a2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xf182e567198463a662fe54475c1d1a1aab503890f6f9ef95fef75a58e51fa4d4"
      }
    ],
    "blockNumber": 99355654,
    "cumulativeGasUsed": "15885467",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x919E5e0C096002cb8a21397D724C4e3EbE77bC15",
    "0xe044919cf58dFb066FC9DE7c69C7db19f336B20c",
    "0xec096ea6eB9aa5ea689b0CF00882366E92377371",
    "0xe485155ce647157624C5E2A41db45A9CC88098c3",
    "0x0e97498F3d91756Ec7F2d244aC97F6Ea9f4eBbC3",
    "0x5Fe380D68fEe022d8acd42dc4D36FbfB249a76d5",
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8"
  ],
  "numDeployments": 1,
  "solcInputHash": "ea0002aaa152992350afdce91990bac1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lyra_eth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lyra_btc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operationalTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lyra_ethErc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lyra_btcErc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hegicErc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ClosePositionByHegic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILyra.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setCollateralTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTotalCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ClosePositionByLyra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buildID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productType\",\"type\":\"uint256\"}],\"name\":\"CreateBuild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BaseOptionBuilder.ProtocolType[]\",\"name\":\"protocolsArrays\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"parametersArray\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"productType\",\"type\":\"uint256\"}],\"name\":\"consolidationOfTransactions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromHegic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"name\":\"decodeFromLyra\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"enum ILyra.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setCollateralTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct ILyra.TradeInputParameters\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"name\":\"encodeFromHegic\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"enum ILyra.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setCollateralTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct ILyra.TradeInputParameters\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"encodeFromLyra\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"paramData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hegicErc721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lyra_btc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lyra_btcErc721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lyra_eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lyra_ethErc721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBuildID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationalTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OptionBuilderClose.sol\":\"OptionBuilderClose\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BaseOptionBuilder.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * DeDeLend\\n * Copyright (C) 2023 DeDeLend\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IHegicStrategy.sol\\\";\\n\\ninterface ILyra {\\n    enum OptionType {\\n        LONG_CALL,\\n        LONG_PUT,\\n        SHORT_CALL_BASE,\\n        SHORT_CALL_QUOTE,\\n        SHORT_PUT_QUOTE\\n    }\\n\\n    struct Result {\\n        uint positionId;\\n        uint totalCost;\\n        uint totalFee;\\n    }\\n\\n    struct TradeInputParameters {\\n        // id of strike\\n        uint strikeId;\\n        // OptionToken ERC721 id for position (set to 0 for new positions)\\n        uint positionId;\\n        // number of sub-orders to break order into (reduces slippage)\\n        uint iterations;\\n        // type of option to trade\\n        OptionType optionType;\\n        // number of contracts to trade\\n        uint amount;\\n        // final amount of collateral to leave in OptionToken position\\n        uint setCollateralTo;\\n        // revert trade if totalCost is below this value\\n        uint minTotalCost;\\n        // revert trade if totalCost is above this value\\n        uint maxTotalCost;\\n        // referrer emitted in Trade event, no on-chain interaction\\n        address referrer;\\n    }\\n\\n    function openPosition(TradeInputParameters memory params) external returns (Result memory result);\\n    function closePosition(TradeInputParameters memory params) external returns (Result memory result);\\n    function quoteAsset() external view returns(ERC20);\\n    function baseAsset() external view returns(ERC20);\\n}\\n\\ninterface IOptionToken is IERC721 {\\n    function nextId() external view returns (uint256);\\n}\\n\\ninterface IOperationalTreasury {\\n    function buy(\\n        IHegicStrategy strategy,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata additional\\n    ) external;\\n\\n    function payOff(uint256 positionID, address account) external;\\n}\\n\\ninterface IPositionsManager is IERC721 {\\n    function nextTokenId() external view returns (uint256);\\n}\\n\\nabstract contract BaseOptionBuilder is Ownable{\\n    \\n    // Enumeration of different protocol types\\n    enum ProtocolType {\\n        lyra_eth,\\n        lyra_btc,\\n        hegic\\n    }\\n\\n    // State variables\\n    address public lyra_eth; // Address of Lyra ETH contract\\n    address public lyra_btc; // Address of Lyra BTC contract\\n    address public operationalTreasury; // Address of operational treasury\\n\\n    address public lyra_ethErc721; // Address of Lyra ETH ERC721 token contract\\n    address public lyra_btcErc721; // Address of Lyra BTC ERC721 token contract\\n    address public hegicErc721; // Address of Hegic ERC721 token contract\\n\\n    address public usdc; // Address of USDC ERC20 token contract\\n\\n    uint256 public nextBuildID = 1;\\n\\n    // Constructor\\n    constructor (\\n        address _lyra_eth,\\n        address _lyra_btc,\\n        address _operationalTreasury,\\n        address _lyra_ethErc721,\\n        address _lyra_btcErc721,\\n        address _hegicErc721,\\n        address _usdc\\n    ) {\\n        lyra_eth = _lyra_eth;\\n        lyra_btc = _lyra_btc;\\n        operationalTreasury = _operationalTreasury;\\n        lyra_ethErc721 = _lyra_ethErc721;\\n        lyra_btcErc721 = _lyra_btcErc721;\\n        hegicErc721 = _hegicErc721;\\n        usdc = _usdc;\\n    }\\n\\n    event CreateBuild(\\n        uint256 buildID,\\n        address indexed user,\\n        uint256 productType\\n    );\\n\\n    // Approve maximum spending limits for tokens used in the contract\\n    function allApprove() external {\\n        ILyra(lyra_eth).quoteAsset().approve(lyra_eth, type(uint256).max);\\n        ILyra(lyra_eth).baseAsset().approve(lyra_eth, type(uint256).max);\\n        ILyra(lyra_btc).quoteAsset().approve(lyra_btc, type(uint256).max);\\n        ILyra(lyra_btc).baseAsset().approve(lyra_btc, type(uint256).max);\\n        ERC20(usdc).approve(operationalTreasury, type(uint256).max);\\n    }\\n\\n    // Process a transaction using Lyra protocol\\n    function _processLyraProtocol(\\n        ProtocolType protocolType,\\n        bytes memory parametersArray,\\n        uint256 buildID\\n    ) internal virtual {}\\n\\n    // Process a transaction using Hegic protocol\\n    function _processHegicProtocol(bytes memory parametersArray, uint256 buildID) internal virtual {}\\n\\n    // Consolidate multiple transactions into a single function call\\n    function consolidationOfTransactions(ProtocolType[] memory protocolsArrays, bytes[] memory parametersArray, uint256 productType) external {\\n        require(protocolsArrays.length == parametersArray.length, \\\"arrays not equal\\\");\\n        \\n        for (uint i = 0; i < protocolsArrays.length; i++) {\\n            if (protocolsArrays[i] == ProtocolType.lyra_eth || protocolsArrays[i] == ProtocolType.lyra_btc) {\\n                _processLyraProtocol(protocolsArrays[i], parametersArray[i], nextBuildID);\\n            } else if (protocolsArrays[i] == ProtocolType.hegic) {\\n                _processHegicProtocol(parametersArray[i], nextBuildID);\\n            }\\n        }\\n\\n        emit CreateBuild(nextBuildID, msg.sender, productType);\\n        nextBuildID++;\\n    }\\n\\n    function onERC721Received(\\n        address, \\n        address, \\n        uint256, \\n        bytes calldata\\n    )external returns(bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    } \\n}\\n\",\"keccak256\":\"0x4403cca722b3363f0d920da03770b826b8cb25d35fb93b9844329d30dfdea9ea\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IHegicStrategy.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2022 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\ninterface IHegicStrategy {\\n    event SetLimit(uint256 limit);\\n\\n    event Acquired(\\n        uint256 indexed id,\\n        StrategyData data,\\n        uint256 negativepnl,\\n        uint256 positivepnl,\\n        uint256 period,\\n        bytes[] additional\\n    );\\n\\n    struct StrategyData {\\n        uint128 amount;\\n        uint128 strike;\\n    }\\n\\n    function strategyData(uint256 strategyID)\\n        external\\n        view\\n        returns (uint128 amount, uint128 strike);\\n\\n    function getLockedByStrategy() external view returns (uint256 amount);\\n\\n    function lockedLimit() external view returns (uint256 value);\\n\\n    function isPayoffAvailable(\\n        uint256 optID,\\n        address caller,\\n        address recipient\\n    ) external view returns (bool);\\n\\n    function getAvailableContracts(uint32 period, bytes[] calldata additional)\\n        external\\n        view\\n        returns (uint256 available);\\n\\n    function payOffAmount(uint256 optionID)\\n        external\\n        view\\n        returns (uint256 profit);\\n\\n    function calculateNegativepnlAndPositivepnl(\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata\\n    ) external view returns (uint128 negativepnl, uint128 positivepnl);\\n\\n    function create(\\n        uint256 id,\\n        address holder,\\n        uint256 amount,\\n        uint256 period,\\n        bytes[] calldata\\n    )\\n        external\\n        returns (\\n            uint32 expiration,\\n            uint256 positivePNL,\\n            uint256 negativePNL\\n        );\\n\\n    function connect() external;\\n\\n    function positionExpiration(uint256)\\n        external\\n        view\\n        returns (uint32 timestamp);\\n}\\n\",\"keccak256\":\"0x76560ef25ec8bcf9dc2170fcd555fbc42534b9de0b0b680afe49a4da62f0350c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/OptionBuilderClose.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * DeDeLend\\n * Copyright (C) 2023 DeDeLend\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./BaseOptionBuilder.sol\\\";\\n\\ncontract OptionBuilderClose is BaseOptionBuilder {\\n\\n    // Constructor\\n    constructor(\\n        address _lyra_eth,\\n        address _lyra_btc,\\n        address _operationalTreasury,\\n        address _lyra_ethErc721,\\n        address _lyra_btcErc721,\\n        address _hegicErc721,\\n        address _usdc\\n    ) BaseOptionBuilder(\\n        _lyra_eth,\\n        _lyra_btc,\\n        _operationalTreasury,\\n        _lyra_ethErc721,\\n        _lyra_btcErc721,\\n        _hegicErc721,\\n        _usdc\\n    ) {}\\n\\n    // Event emitted when a position is closed using Lyra protocol\\n    event ClosePositionByLyra(\\n        uint256 indexed buildID,\\n        uint256 strikeId,\\n        uint256 positionId,\\n        uint256 iterations,\\n        ILyra.OptionType optionType,\\n        uint256 amount,\\n        uint256 setCollateralTo,\\n        uint256 minTotalCost,\\n        uint256 maxTotalCost,\\n        address referrer\\n    );\\n\\n    // Event emitted when a position is closed using Hegic protocol\\n    event ClosePositionByHegic(\\n        uint256 indexed buildID,\\n        uint256 tokenID,\\n        address account\\n    );\\n\\n    function _processLyraProtocol(\\n        ProtocolType protocolType,\\n        bytes memory parameters,\\n        uint256 buildID\\n    ) override internal {\\n        (\\n            address account,\\n            ILyra.TradeInputParameters memory params, \\n            uint256 premium\\n        ) = decodeFromLyra(parameters);\\n        \\n        address lyra = lyra_eth;\\n        address lyraErc721 = lyra_ethErc721;\\n        \\n        // Check the protocol type and set appropriate Lyra and ERC721 token addresses\\n        if (protocolType == ProtocolType.lyra_btc) {\\n            lyra = lyra_btc;\\n            lyraErc721 = lyra_btcErc721;\\n        }\\n        \\n        // Calculate determine Lyra asset based on option type\\n        ERC20 lyraAsset = params.optionType == ILyra.OptionType.SHORT_CALL_BASE ? ILyra(lyra).baseAsset() : ILyra(lyra).quoteAsset();\\n\\n        // Transfer premium amount from sender to the contract\\n        ILyra(lyra).quoteAsset().transferFrom(msg.sender, address(this), premium);\\n        \\n        IOptionToken(lyraErc721).transferFrom(account, address(this), params.positionId);\\n        \\n        // Close the position using the Lyra contract\\n        ILyra(lyra).closePosition(params);\\n        \\n        // Transfer back remaining tokens to the sender\\n        lyraAsset.transfer(account, lyraAsset.balanceOf(address(this)));\\n        if (params.optionType == ILyra.OptionType.SHORT_CALL_BASE) {\\n            ILyra(lyra).quoteAsset().transfer(account, ILyra(lyra).quoteAsset().balanceOf(address(this)));\\n        }\\n        \\n        // Emit the ClosePositionByLyra event with relevant parameters\\n        emit ClosePositionByLyra(\\n            buildID,\\n            params.strikeId,\\n            params.positionId,\\n            params.iterations,\\n            params.optionType,\\n            params.amount,\\n            params.setCollateralTo,\\n            params.minTotalCost,\\n            params.maxTotalCost,\\n            params.referrer\\n        );\\n    }\\n\\n    function _processHegicProtocol(bytes memory parameters, uint256 buildID) internal override {\\n        (\\n            address account,\\n            uint256 positionID\\n        ) = decodeFromHegic(parameters);\\n        \\n        IPositionsManager(hegicErc721).transferFrom(account, address(this), positionID);\\n        \\n        // Buy the option using the operational treasury contract\\n        IOperationalTreasury(operationalTreasury).payOff(\\n            positionID,\\n            account\\n        );\\n        \\n        // Emit the ClosePositionByHegic event with relevant parameters\\n        emit ClosePositionByHegic(buildID, positionID, account);\\n    }\\n\\n    // Encode TradeInputParameters struct into bytes\\n    function encodeFromLyra(address account, ILyra.TradeInputParameters memory params, uint256 premium) external pure returns (bytes memory paramData) {\\n        return abi.encode(account, params, premium);\\n    }\\n\\n    function decodeFromLyra(bytes memory paramData) public pure returns (address account, ILyra.TradeInputParameters memory params, uint256 premium) {\\n        (\\n            account,\\n            params,\\n            premium\\n        ) = abi.decode(paramData, (\\n            address,\\n            ILyra.TradeInputParameters,\\n            uint256\\n        ));\\n    }\\n\\n    // Encode Hegic parameters into bytes\\n    function encodeFromHegic(\\n        address account,\\n        uint256 positionID\\n    ) external pure returns (bytes memory paramData) {\\n        return abi.encode(account, positionID);\\n    }\\n\\n    function decodeFromHegic(\\n        bytes memory paramData\\n    ) public pure returns (address account, uint256 positionID) {\\n        (\\n            account,\\n            positionID\\n        ) = abi.decode(paramData, (\\n            address,\\n            uint256\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x8fc7eda1edecbe3111e3691e1d04db280868c52ef24df9bda7526636b33bcfde\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063ad4bb908116100a2578063f2b60d2a11610071578063f2b60d2a1461029f578063f2fde38b146102d0578063fa3f11b5146102ec578063fdbda7591461031c578063ff5406691461034c57610116565b8063ad4bb9081461023b578063ae96f72714610245578063d66aafa614610263578063d7819cd11461028157610116565b8063715018a6116100e9578063715018a6146101a557806389f94c29146101af5780638da5cb5b146101e157806394cefc48146101ff578063ac3ec7481461021d57610116565b806305395c201461011b578063150b7a02146101395780633e413bee1461016957806362d23bf114610187575b600080fd5b610123610368565b6040516101309190611a3b565b60405180910390f35b610153600480360381019061014e9190611b31565b61038e565b6040516101609190611bf4565b60405180910390f35b6101716103bc565b60405161017e9190611a3b565b60405180910390f35b61018f6103e2565b60405161019c9190611a3b565b60405180910390f35b6101ad610408565b005b6101c960048036038101906101c49190611d50565b61041c565b6040516101d893929190611ef4565b60405180910390f35b6101e961044f565b6040516101f69190611a3b565b60405180910390f35b610207610478565b6040516102149190611a3b565b60405180910390f35b61022561049e565b6040516102329190611a3b565b60405180910390f35b6102436104c4565b005b61024d610b74565b60405161025a9190611a3b565b60405180910390f35b61026b610b9a565b6040516102789190611a3b565b60405180910390f35b610289610bc0565b6040516102969190611f2d565b60405180910390f35b6102b960048036038101906102b49190611d50565b610bc6565b6040516102c7929190611f48565b60405180910390f35b6102ea60048036038101906102e59190611f71565b610bea565b005b610306600480360381019061030191906120a8565b610c6e565b6040516103139190612185565b60405180910390f35b610336600480360381019061033191906121a7565b610c9d565b6040516103439190612185565b60405180910390f35b610366600480360381019061036191906123b0565b610cc9565b005b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610410610ee0565b61041a6000610f5e565b565b6000610426611986565b60008380602001905181019061043c9190612598565b8093508194508295505050509193909250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561052c57600080fd5b505afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610564919061262b565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016105e0929190611f48565b602060405180830381600087803b1580156105fa57600080fd5b505af115801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190612690565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561069b57600080fd5b505afa1580156106af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d3919061262b565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161074f929190611f48565b602060405180830381600087803b15801561076957600080fd5b505af115801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a19190612690565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561080a57600080fd5b505afa15801561081e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610842919061262b565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016108be929190611f48565b602060405180830381600087803b1580156108d857600080fd5b505af11580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109109190612690565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561097957600080fd5b505afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b1919061262b565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610a2d929190611f48565b602060405180830381600087803b158015610a4757600080fd5b505af1158015610a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7f9190612690565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610b1f929190611f48565b602060405180830381600087803b158015610b3957600080fd5b505af1158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b719190612690565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60008082806020019051810190610bdd91906126bd565b8092508193505050915091565b610bf2610ee0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5990612780565b60405180910390fd5b610c6b81610f5e565b50565b6060838383604051602001610c8593929190611ef4565b60405160208183030381529060405290509392505050565b60608282604051602001610cb2929190611f48565b604051602081830303815290604052905092915050565b8151835114610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906127ec565b60405180910390fd5b60005b8351811015610e705760006002811115610d2d57610d2c611da8565b5b848281518110610d4057610d3f61280c565b5b60200260200101516002811115610d5a57610d59611da8565b5b1480610da4575060016002811115610d7557610d74611da8565b5b848281518110610d8857610d8761280c565b5b60200260200101516002811115610da257610da1611da8565b5b145b15610def57610dea848281518110610dbf57610dbe61280c565b5b6020026020010151848381518110610dda57610dd961280c565b5b6020026020010151600854611022565b610e5d565b600280811115610e0257610e01611da8565b5b848281518110610e1557610e1461280c565b5b60200260200101516002811115610e2f57610e2e611da8565b5b1415610e5c57610e5b838281518110610e4b57610e4a61280c565b5b602002602001015160085461180e565b5b5b8080610e689061286a565b915050610d10565b503373ffffffffffffffffffffffffffffffffffffffff167fdf35236315d79f749febbbe30af46d136cadd5dc4f8006c5668c7bd2fac5da7260085483604051610ebb9291906128b3565b60405180910390a260086000815480929190610ed69061286a565b9190505550505050565b610ee861197e565b73ffffffffffffffffffffffffffffffffffffffff16610f0661044f565b73ffffffffffffffffffffffffffffffffffffffff1614610f5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5390612928565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060006110308561041c565b9250925092506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506001600281111561109857611097611da8565b5b8860028111156110ab576110aa611da8565b5b14156110fc57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b60006002600481111561111257611111611da8565b5b8560600151600481111561112957611128611da8565b5b146111b1578273ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561117457600080fd5b505afa158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac919061262b565b611230565b8273ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f757600080fd5b505afa15801561120b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f919061262b565b5b90508273ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561127857600080fd5b505afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b0919061262b565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016112ec93929190612948565b602060405180830381600087803b15801561130657600080fd5b505af115801561131a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133e9190612690565b508173ffffffffffffffffffffffffffffffffffffffff166323b872dd873088602001516040518463ffffffff1660e01b815260040161138093929190612948565b600060405180830381600087803b15801561139a57600080fd5b505af11580156113ae573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16633c8e7624866040518263ffffffff1660e01b81526004016113eb919061297f565b606060405180830381600087803b15801561140557600080fd5b505af1158015611419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143d91906129ff565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114949190611a3b565b60206040518083038186803b1580156114ac57600080fd5b505afa1580156114c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e49190612a2c565b6040518363ffffffff1660e01b8152600401611501929190611f48565b602060405180830381600087803b15801561151b57600080fd5b505af115801561152f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115539190612690565b506002600481111561156857611567611da8565b5b8560600151600481111561157f5761157e611da8565b5b1415611796578273ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b1580156115cb57600080fd5b505afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611603919061262b565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878573ffffffffffffffffffffffffffffffffffffffff1663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561166557600080fd5b505afa158015611679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169d919061262b565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116d59190611a3b565b60206040518083038186803b1580156116ed57600080fd5b505afa158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190612a2c565b6040518363ffffffff1660e01b8152600401611742929190611f48565b602060405180830381600087803b15801561175c57600080fd5b505af1158015611770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117949190612690565b505b867fb91c8e63d82620c620ac9d4be57bdf978a47a8f9cfe931d9710a2360161dced386600001518760200151886040015189606001518a608001518b60a001518c60c001518d60e001518e61010001516040516117fb99989796959493929190612a68565b60405180910390a2505050505050505050565b60008061181a84610bc6565b91509150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b815260040161187d93929190612948565b600060405180830381600087803b15801561189757600080fd5b505af11580156118ab573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663914fb51882846040518363ffffffff1660e01b815260040161190c929190612af5565b600060405180830381600087803b15801561192657600080fd5b505af115801561193a573d6000803e3d6000fd5b50505050827f6f67fc9eb46d331871756199acef8a5362f412ac1a2487f7710330447df9550e8284604051611970929190612af5565b60405180910390a250505050565b600033905090565b604051806101200160405280600081526020016000815260200160008152602001600060048111156119bb576119ba611da8565b5b815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a25826119fa565b9050919050565b611a3581611a1a565b82525050565b6000602082019050611a506000830184611a2c565b92915050565b6000604051905090565b600080fd5b600080fd5b611a7381611a1a565b8114611a7e57600080fd5b50565b600081359050611a9081611a6a565b92915050565b6000819050919050565b611aa981611a96565b8114611ab457600080fd5b50565b600081359050611ac681611aa0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611af157611af0611acc565b5b8235905067ffffffffffffffff811115611b0e57611b0d611ad1565b5b602083019150836001820283011115611b2a57611b29611ad6565b5b9250929050565b600080600080600060808688031215611b4d57611b4c611a60565b5b6000611b5b88828901611a81565b9550506020611b6c88828901611a81565b9450506040611b7d88828901611ab7565b935050606086013567ffffffffffffffff811115611b9e57611b9d611a65565b5b611baa88828901611adb565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bee81611bb9565b82525050565b6000602082019050611c096000830184611be5565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c5d82611c14565b810181811067ffffffffffffffff82111715611c7c57611c7b611c25565b5b80604052505050565b6000611c8f611a56565b9050611c9b8282611c54565b919050565b600067ffffffffffffffff821115611cbb57611cba611c25565b5b611cc482611c14565b9050602081019050919050565b82818337600083830152505050565b6000611cf3611cee84611ca0565b611c85565b905082815260208101848484011115611d0f57611d0e611c0f565b5b611d1a848285611cd1565b509392505050565b600082601f830112611d3757611d36611acc565b5b8135611d47848260208601611ce0565b91505092915050565b600060208284031215611d6657611d65611a60565b5b600082013567ffffffffffffffff811115611d8457611d83611a65565b5b611d9084828501611d22565b91505092915050565b611da281611a96565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110611de857611de7611da8565b5b50565b6000819050611df982611dd7565b919050565b6000611e0982611deb565b9050919050565b611e1981611dfe565b82525050565b611e2881611a1a565b82525050565b61012082016000820151611e456000850182611d99565b506020820151611e586020850182611d99565b506040820151611e6b6040850182611d99565b506060820151611e7e6060850182611e10565b506080820151611e916080850182611d99565b5060a0820151611ea460a0850182611d99565b5060c0820151611eb760c0850182611d99565b5060e0820151611eca60e0850182611d99565b50610100820151611edf610100850182611e1f565b50505050565b611eee81611a96565b82525050565b600061016082019050611f0a6000830186611a2c565b611f176020830185611e2e565b611f25610140830184611ee5565b949350505050565b6000602082019050611f426000830184611ee5565b92915050565b6000604082019050611f5d6000830185611a2c565b611f6a6020830184611ee5565b9392505050565b600060208284031215611f8757611f86611a60565b5b6000611f9584828501611a81565b91505092915050565b600080fd5b60058110611fb057600080fd5b50565b600081359050611fc281611fa3565b92915050565b60006101208284031215611fdf57611fde611f9e565b5b611fea610120611c85565b90506000611ffa84828501611ab7565b600083015250602061200e84828501611ab7565b602083015250604061202284828501611ab7565b604083015250606061203684828501611fb3565b606083015250608061204a84828501611ab7565b60808301525060a061205e84828501611ab7565b60a08301525060c061207284828501611ab7565b60c08301525060e061208684828501611ab7565b60e08301525061010061209b84828501611a81565b6101008301525092915050565b600080600061016084860312156120c2576120c1611a60565b5b60006120d086828701611a81565b93505060206120e186828701611fc8565b9250506101406120f386828701611ab7565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561213757808201518184015260208101905061211c565b83811115612146576000848401525b50505050565b6000612157826120fd565b6121618185612108565b9350612171818560208601612119565b61217a81611c14565b840191505092915050565b6000602082019050818103600083015261219f818461214c565b905092915050565b600080604083850312156121be576121bd611a60565b5b60006121cc85828601611a81565b92505060206121dd85828601611ab7565b9150509250929050565b600067ffffffffffffffff82111561220257612201611c25565b5b602082029050602081019050919050565b6003811061222057600080fd5b50565b60008135905061223281612213565b92915050565b600061224b612246846121e7565b611c85565b9050808382526020820190506020840283018581111561226e5761226d611ad6565b5b835b8181101561229757806122838882612223565b845260208401935050602081019050612270565b5050509392505050565b600082601f8301126122b6576122b5611acc565b5b81356122c6848260208601612238565b91505092915050565b600067ffffffffffffffff8211156122ea576122e9611c25565b5b602082029050602081019050919050565b600061230e612309846122cf565b611c85565b9050808382526020820190506020840283018581111561233157612330611ad6565b5b835b8181101561237857803567ffffffffffffffff81111561235657612355611acc565b5b8086016123638982611d22565b85526020850194505050602081019050612333565b5050509392505050565b600082601f83011261239757612396611acc565b5b81356123a78482602086016122fb565b91505092915050565b6000806000606084860312156123c9576123c8611a60565b5b600084013567ffffffffffffffff8111156123e7576123e6611a65565b5b6123f3868287016122a1565b935050602084013567ffffffffffffffff81111561241457612413611a65565b5b61242086828701612382565b925050604061243186828701611ab7565b9150509250925092565b6000612446826119fa565b9050919050565b6124568161243b565b811461246157600080fd5b50565b6000815190506124738161244d565b92915050565b60008151905061248881611aa0565b92915050565b60008151905061249d81611fa3565b92915050565b6000815190506124b281611a6a565b92915050565b600061012082840312156124cf576124ce611f9e565b5b6124da610120611c85565b905060006124ea84828501612479565b60008301525060206124fe84828501612479565b602083015250604061251284828501612479565b60408301525060606125268482850161248e565b606083015250608061253a84828501612479565b60808301525060a061254e84828501612479565b60a08301525060c061256284828501612479565b60c08301525060e061257684828501612479565b60e08301525061010061258b848285016124a3565b6101008301525092915050565b600080600061016084860312156125b2576125b1611a60565b5b60006125c086828701612464565b93505060206125d1868287016124b8565b9250506101406125e386828701612479565b9150509250925092565b60006125f882611a1a565b9050919050565b612608816125ed565b811461261357600080fd5b50565b600081519050612625816125ff565b92915050565b60006020828403121561264157612640611a60565b5b600061264f84828501612616565b91505092915050565b60008115159050919050565b61266d81612658565b811461267857600080fd5b50565b60008151905061268a81612664565b92915050565b6000602082840312156126a6576126a5611a60565b5b60006126b48482850161267b565b91505092915050565b600080604083850312156126d4576126d3611a60565b5b60006126e285828601612464565b92505060206126f385828601612479565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061276a6026836126fd565b91506127758261270e565b604082019050919050565b600060208201905081810360008301526127998161275d565b9050919050565b7f617272617973206e6f7420657175616c00000000000000000000000000000000600082015250565b60006127d66010836126fd565b91506127e1826127a0565b602082019050919050565b60006020820190508181036000830152612805816127c9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061287582611a96565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156128a8576128a761283b565b5b600182019050919050565b60006040820190506128c86000830185611ee5565b6128d56020830184611ee5565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006129126020836126fd565b915061291d826128dc565b602082019050919050565b6000602082019050818103600083015261294181612905565b9050919050565b600060608201905061295d6000830186611a2c565b61296a6020830185611a2c565b6129776040830184611ee5565b949350505050565b6000610120820190506129956000830184611e2e565b92915050565b6000606082840312156129b1576129b0611f9e565b5b6129bb6060611c85565b905060006129cb84828501612479565b60008301525060206129df84828501612479565b60208301525060406129f384828501612479565b60408301525092915050565b600060608284031215612a1557612a14611a60565b5b6000612a238482850161299b565b91505092915050565b600060208284031215612a4257612a41611a60565b5b6000612a5084828501612479565b91505092915050565b612a6281611dfe565b82525050565b600061012082019050612a7e600083018c611ee5565b612a8b602083018b611ee5565b612a98604083018a611ee5565b612aa56060830189612a59565b612ab26080830188611ee5565b612abf60a0830187611ee5565b612acc60c0830186611ee5565b612ad960e0830185611ee5565b612ae7610100830184611a2c565b9a9950505050505050505050565b6000604082019050612b0a6000830185611ee5565b612b176020830184611a2c565b939250505056fea2646970667358221220ac77ff82960bc4479b18356f6dc864ddfcf9b476a53cb18d42767dabed1b8cc164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OptionBuilderClose.sol:OptionBuilderClose",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1069,
        "contract": "contracts/OptionBuilderClose.sol:OptionBuilderClose",
        "label": "lyra_eth",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1071,
        "contract": "contracts/OptionBuilderClose.sol:OptionBuilderClose",
        "label": "lyra_btc",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1073,
        "contract": "contracts/OptionBuilderClose.sol:OptionBuilderClose",
        "label": "operationalTreasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1075,
        "contract": "contracts/OptionBuilderClose.sol:OptionBuilderClose",
        "label": "lyra_ethErc721",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1077,
        "contract": "contracts/OptionBuilderClose.sol:OptionBuilderClose",
        "label": "lyra_btcErc721",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1079,
        "contract": "contracts/OptionBuilderClose.sol:OptionBuilderClose",
        "label": "hegicErc721",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1081,
        "contract": "contracts/OptionBuilderClose.sol:OptionBuilderClose",
        "label": "usdc",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1084,
        "contract": "contracts/OptionBuilderClose.sol:OptionBuilderClose",
        "label": "nextBuildID",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}